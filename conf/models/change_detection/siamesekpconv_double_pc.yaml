models:
  # Siamese KPConv:
  # KPConv: Flexible and Deformable Convolution for Point Clouds (https://arxiv.org/abs/1904.08889)
  # KPConv support format_type="[PARTIAL_DENSE | MESSAGE_PASSING]"
  SiameseKPConv:
    path_pretrained: ""
    weight_name: "best_miou_ch"
    class: siamesekpconv_double_pc.SiameseKPConv
    conv_type: "PARTIAL_DENSE"
    use_category: ${data.use_category}
    define_constants:
      in_grid_size: ${data.first_subsampling}
      FEAT: 3
      in_feat: 64
      bn_momentum: 0.02
    down_conv_1:
      n_kernel_points: 25
      down_conv_nn:
        [
          [[FEAT + 1, in_feat], [in_feat, 2*in_feat]],
          [[2*in_feat, 2*in_feat], [2*in_feat, 4*in_feat]],
          [[4*in_feat, 4*in_feat], [4*in_feat, 8*in_feat]],
          [[8*in_feat, 8*in_feat], [8*in_feat, 16*in_feat]],
          [[16*in_feat, 16*in_feat], [16*in_feat, 32*in_feat]],
        ]
      grid_size:
        [
          [in_grid_size, in_grid_size],
          [2*in_grid_size, 2*in_grid_size],
          [4*in_grid_size, 4*in_grid_size],
          [8*in_grid_size, 8*in_grid_size],
          [16*in_grid_size, 16*in_grid_size],
        ]
      prev_grid_size:
        [
          [in_grid_size, in_grid_size],
          [in_grid_size, 2*in_grid_size],
          [2*in_grid_size, 4*in_grid_size],
          [4*in_grid_size, 8*in_grid_size],
          [8*in_grid_size, 16*in_grid_size],
        ]
      block_names:
        [
          ["SimpleBlock", "ResnetBBlock"],
          ["ResnetBBlock", "ResnetBBlock"],
          ["ResnetBBlock", "ResnetBBlock"],
          ["ResnetBBlock", "ResnetBBlock"],
          ["ResnetBBlock", "ResnetBBlock"],
        ]
      has_bottleneck:
        [[False, True], [True, True], [True, True], [True, True], [True, True]]
      deformable:
        [
          [False, False],
          [False, False],
          [False, False],
          [False, False],
          [False, False],
        ]
      max_num_neighbors: [[25, 25], [25, 30], [30, 38], [38, 38], [38, 38]]
      module_name: KPDualBlock
    up_conv_1:
      module_name: FPModule_PD
      up_conv_nn:
        [
          [32*in_feat + 16*in_feat, 8*in_feat],
          [8*in_feat + 8*in_feat, 4*in_feat],
          [4*in_feat + 4*in_feat, 2*in_feat],
          [2*in_feat + 2*in_feat, in_feat],
        ]
      skip: True
      up_k: [1, 1, 1, 1]
      bn_momentum:
        [bn_momentum, bn_momentum, bn_momentum, bn_momentum, bn_momentum]
    down_conv_2:
      n_kernel_points: 25
      down_conv_nn:
        [
        [[FEAT + 1, in_feat], [in_feat, 2*in_feat]],
        [[2*in_feat, 2*in_feat], [2*in_feat, 4*in_feat]],
        [[4*in_feat, 4*in_feat], [4*in_feat, 8*in_feat]],
        [[8*in_feat, 8*in_feat], [8*in_feat, 16*in_feat]],
        [[16*in_feat, 16*in_feat], [16*in_feat, 32*in_feat]],
        ]
      grid_size:
        [
        [in_grid_size, in_grid_size],
        [2*in_grid_size, 2*in_grid_size],
        [4*in_grid_size, 4*in_grid_size],
        [8*in_grid_size, 8*in_grid_size],
        [16*in_grid_size, 16*in_grid_size],
        ]
      prev_grid_size:
        [
        [in_grid_size, in_grid_size],
        [in_grid_size, 2*in_grid_size],
        [2*in_grid_size, 4*in_grid_size],
        [4*in_grid_size, 8*in_grid_size],
        [8*in_grid_size, 16*in_grid_size],
        ]
      block_names:
        [
        ["SimpleBlock", "ResnetBBlock"],
        ["ResnetBBlock", "ResnetBBlock"],
        ["ResnetBBlock", "ResnetBBlock"],
        ["ResnetBBlock", "ResnetBBlock"],
        ["ResnetBBlock", "ResnetBBlock"],
        ]
      has_bottleneck:
        [[False, True], [True, True], [True, True], [True, True], [True, True]]
      deformable:
        [
        [False, False],
        [False, False],
        [False, False],
        [False, False],
        [False, False],
        ]
      max_num_neighbors: [[25, 25], [25, 30], [30, 38], [38, 38], [38, 38]]
      module_name: KPDualBlock
    up_conv_2:
      module_name: FPModule_PD
      up_conv_nn:
        [
        [32*in_feat + 16*in_feat, 8*in_feat],
        [8*in_feat + 8*in_feat, 4*in_feat],
        [4*in_feat + 4*in_feat, 2*in_feat],
        [2*in_feat + 2*in_feat, in_feat],
        ]
      skip: True
      up_k: [1, 1, 1, 1]
      bn_momentum:
        [bn_momentum, bn_momentum, bn_momentum, bn_momentum, bn_momentum]
    mlp_cls:
      nn: [in_feat, in_feat]
      dropout: 0.5
      bn_momentum: bn_momentum
    loss_weights:
      lambda_reg: 1e-6
